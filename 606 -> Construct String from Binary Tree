#include<bits/stdc++.h>
using namespace std;

class node
{
    public:
    int data;
    node* left;
    node* right;
    node(int d)
    {
        this -> data = d;
        this -> left = NULL;
        this -> right = NULL;
    }
};

node* buildTree(node* root)
{
    cout<<"Enter Value"<<endl;
    int data; cin>>data;
    root = new node(data);

    if(data == -1){ return NULL; }

        cout<<"Left of "<<data<<endl;
        root -> left = buildTree(root -> left);

        cout<<"Right of "<<data<<endl;
        root -> right = buildTree(root -> right);

    return root;
}

void solve(node* root,string &ans)
{
    if(root == NULL){ return; }

    ans += to_string(root->data);

    if(root -> left || root -> right)
    { ans += '(';  solve(root->left,ans); ans += ')'; }

    if(root -> right)
    { ans += '(';  solve(root->right,ans); ans += ')'; }
}

string tree2str(node* root) 
{
    string ans = "";
    solve(root,ans);
    return ans;
}

void LevelOrederTraversal(node* root)
{
    queue<node*> q;
    q.push(root);
    q.push(NULL);

    while(!q.empty()) {
        node* temp = q.front();
        q.pop();

        if(temp == NULL) 
        { 
            cout << endl;
            if(!q.empty()) { 
                q.push(NULL);
            }  
        }
        else
        {
            cout << temp -> data << " ";
            if(temp ->left) {
                q.push(temp ->left);
            }

            if(temp ->right) {
                q.push(temp ->right);
            }
        }
    }
}

int main()
{
    node* root = NULL;
    root = buildTree(root);
    cout<<"LEVEL ORDER : "<<endl;
    LevelOrederTraversal(root);
    cout<<tree2str(root);
    
    return 0;
}
