    #include<bits/stdc++.h>
    using namespace std;

    bool isPossible(int i,int j,vector<vector<bool>>& visited,vector<vector<int>>& grid)
    {
        int row = grid.size();
        int col = grid[0].size();

        if((i < row && i >= 0) && (j < col && j >= 0) && grid[i][j] == 1 && visited[i][j] == false)
        { return true; }

        return false;
    }

    int area(int i,int j,vector<vector<bool>>& visited,vector<vector<int>>& grid)
    {
        if(isPossible(i,j,visited,grid) == false){ return 0; }

        visited[i][j] = true;

        return (1 + area(i+1,j,visited,grid) + area(i-1,j,visited,grid)
                  + area(i,j+1,visited,grid) + area(i,j-1,visited,grid));
    }

    int maxAreaOfIsland(vector<vector<int>>& grid) 
    {    
        int row = grid.size();
        int col = grid[0].size();
        int ans = 0;

        vector<vector<bool>> visited(row, vector<bool>(col,false));

        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                int x = area(i,j,visited,grid);
                ans = max(ans,x);
            }
        }

        return ans;
    }

    int main()
    {
        int row; 
        cout<<"Enter No of Rows : "<<endl;
        cin>>row;
        int col; 
        cout<<"Enter No of Colms : "<<endl;
        cin>>col;

        vector<vector<int>>grid;
        cout<<"Enter Elements of Grid : "<<endl;
        for(int i=0;i<row;i++)
        {
            vector<int>x;
            for(int j=0;j<col;j++)
            {  int y; cin>>y; x.push_back(y); }
            grid.push_back(x);
        }

        int ans = maxAreaOfIsland(grid);
        cout<<ans;
        return 0;
    }
